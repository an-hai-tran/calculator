{"version":3,"sources":["Components/DigitButton.js","Components/OperationButton.js","App.js","index.js"],"names":["DigitButton","dispatch","digit","onClick","type","ACTIONS","ADD_DIGIT","payload","OperationButton","operation","CHOOSE_OPERATION","CLEAR","DELETE_DIGIT","EVALUATE","reducer","state","overwrite","currentOperand","includes","length","slice","previousOperand","evaluate","prev","parseFloat","current","isNaN","computation","toString","INTEGER_FORMATTER","Intl","NumberFormat","maximumFractionDigits","formatOperand","operand","split","integer","decimal","format","App","useReducer","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b0cf91b8.chunk.js","sourcesContent":["import { ACTIONS } from \"../App\";\n\nexport default function DigitButton({ dispatch, digit }) {\n  return (\n    <button\n      onClick={() => dispatch({ type: ACTIONS.ADD_DIGIT, payload: { digit } })}\n    >\n      {digit}\n    </button>\n  );\n}\n","import { ACTIONS } from \"../App\";\n\nexport default function OperationButton({ dispatch, operation }) {\n  return (\n    <button\n      onClick={() =>\n        dispatch({ type: ACTIONS.CHOOSE_OPERATION, payload: { operation } })\n      }\n    >\n      {operation}\n    </button>\n  );\n}\n","/* eslint-disable default-case */\nimport { useReducer } from \"react\";\nimport \"./App.css\";\nimport DigitButton from \"./Components/DigitButton\";\nimport OperationButton from \"./Components/OperationButton\";\n\nexport const ACTIONS = {\n  ADD_DIGIT: \"add-digit\",\n  CHOOSE_OPERATION: \"choose-operation\",\n  CLEAR: \"clear\",\n  DELETE_DIGIT: \"delete-digit\",\n  EVALUATE: \"evaluate\",\n};\n\nfunction reducer(state, { type, payload }) {\n  switch (type) {\n    case ACTIONS.ADD_DIGIT:\n      if (state.overwrite) {\n        return {\n          ...state,\n          currentOperand: payload.digit,\n          overwrite: false,\n        };\n      }\n      if (payload.digit === \"0\" && state.currentOperand === \"0\") return state;\n\n      if (payload.digit === \".\" && state.currentOperand.includes(\".\"))\n        return state;\n\n      return {\n        ...state,\n        currentOperand: `${state.currentOperand || \"\"}${payload.digit}`,\n      };\n\n    case ACTIONS.DELETE_DIGIT:\n      if (state.overwrite) {\n        return {\n          ...state,\n          overwrite: false,\n          currentOperand: null,\n        };\n      }\n\n      if (state.currentOperand == null) return state;\n      if (state.currentOperand.length === 1) {\n        return {\n          ...state,\n          currentOperand: null,\n        };\n      }\n\n      return {\n        ...state,\n        currentOperand: state.currentOperand.slice(0, -1),\n      };\n\n    case ACTIONS.CLEAR:\n      return {};\n\n    case ACTIONS.EVALUATE:\n      if (\n        state.operation == null ||\n        state.currentOperand == null ||\n        state.previousOperand == null\n      )\n        return state;\n      return {\n        ...state,\n        overwrite: true,\n        operation: null,\n        previousOperand: null,\n        currentOperand: evaluate(state),\n      };\n\n    case ACTIONS.CHOOSE_OPERATION:\n      if (state.currentOperand == null && state.previousOperand == null)\n        return state;\n\n      if (state.currentOperand == null) {\n        return {\n          ...state,\n          operation: payload.operation,\n        };\n      }\n\n      if (state.previousOperand == null) {\n        return {\n          ...state,\n          operation: payload.operation,\n          previousOperand: state.currentOperand,\n          currentOperand: null,\n        };\n      }\n\n      return {\n        ...state,\n        previousOperand: evaluate(state),\n        operation: payload.operation,\n        currentOperand: null,\n      };\n  }\n}\n\nfunction evaluate({ currentOperand, previousOperand, operation }) {\n  const prev = parseFloat(previousOperand);\n  const current = parseFloat(currentOperand);\n  if (isNaN(prev) || isNaN(current)) return \"\";\n\n  let computation = \"\";\n  switch (operation) {\n    case \"÷\":\n      computation = prev / current;\n      break;\n\n    case \"×\":\n      computation = prev * current;\n      break;\n\n    case \"+\":\n      computation = prev + current;\n      break;\n\n    case \"-\":\n      computation = prev - current;\n      break;\n  }\n\n  return computation.toString();\n}\n\nconst INTEGER_FORMATTER = new Intl.NumberFormat(\"en-us\", {\n  maximumFractionDigits: 0,\n});\n\nfunction formatOperand(operand) {\n  if (operand == null) return;\n  const [integer, decimal] = operand.split(\".\");\n  if (decimal == null) return INTEGER_FORMATTER.format(integer);\n  return `${INTEGER_FORMATTER.format(integer)}.${decimal}`;\n}\n\nfunction App() {\n  const [{ currentOperand, previousOperand, operation }, dispatch] = useReducer(\n    reducer,\n    {}\n  );\n\n  return (\n    <div className=\"calculator-grid\">\n      <div className=\"output\">\n        <div className=\"previous-operand\">\n          {formatOperand(previousOperand)} {operation}\n        </div>\n        <div className=\"current-operand\">{formatOperand(currentOperand)}</div>\n      </div>\n      <button\n        className=\"span-two\"\n        onClick={() => dispatch({ type: ACTIONS.CLEAR })}\n      >\n        AC\n      </button>\n      <button onClick={() => dispatch({ type: ACTIONS.DELETE_DIGIT })}>\n        ⌫\n      </button>\n      <OperationButton operation=\"÷\" dispatch={dispatch} />\n      <DigitButton digit=\"7\" dispatch={dispatch} />\n      <DigitButton digit=\"8\" dispatch={dispatch} />\n      <DigitButton digit=\"9\" dispatch={dispatch} />\n      <OperationButton operation=\"×\" dispatch={dispatch} />\n      <DigitButton digit=\"4\" dispatch={dispatch} />\n      <DigitButton digit=\"5\" dispatch={dispatch} />\n      <DigitButton digit=\"6\" dispatch={dispatch} />\n      <OperationButton operation=\"+\" dispatch={dispatch} />\n      <DigitButton digit=\"1\" dispatch={dispatch} />\n      <DigitButton digit=\"2\" dispatch={dispatch} />\n      <DigitButton digit=\"3\" dispatch={dispatch} />\n      <OperationButton operation=\"-\" dispatch={dispatch} />\n      <DigitButton digit=\".\" dispatch={dispatch} />\n      <DigitButton digit=\"0\" dispatch={dispatch} />\n      <button\n        className=\"span-two\"\n        onClick={() => dispatch({ type: ACTIONS.EVALUATE })}\n      >\n        =\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}